version: "3.8"
services:
  postegre_db:
    container_name: postegre_db
    image: postgres:14.12-alpine3.18
    networks:
      - maianet
    environment:
      - POSTGRES_USER=maia
      - POSTGRES_PASSWORD=maiapw
    ports:
      - 5432:5432
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data

  api:
    image: dowglasmaia/address-api
    container_name: address-api
    networks:
      - maianet
    ports:
      - 8088:8088
    restart: unless-stopped
    environment:
      - SPRING_DATA_MONGODB_HOST=mongo
      - SPRING_DATA_MONGODB_PORT=27017
      - SPRING_DATA_MONGODB_DATABASE=addressdb
      - SPRING_DATA_MONGODB_USERNAME=root
      - SPRING_DATA_MONGODB_PASSWORD=example
      - DOTEL_SERVICE_NAME=address-api
      - DOTEL_TRACES_EXPORTER=otlp
      - DOTEL_METRICS_EXPORTER=none
      - DOTEL_EXPORTER_OTLP_ENDPOINT=http://collector-api:4318
      - DOTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf

  mongo:
    container_name: mongo
    image: mongo
    restart: unless-stopped
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - maianet

  mongo-express:
    image: mongo-express
    restart: unless-stopped
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      ME_CONFIG_BASICAUTH: false
    networks:
      - maianet

  redis:
    image: redis
    command: redis-server
    hostname: redis
    ports:
      - 6379:6379

  prometheus:
    image: prom/prometheus:latest
    user: "root:root"
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    ports:
      - 9090:9090
    networks:
      - maianet

  grafana:
    image: grafana/grafana:11.1.0
    user: "root:root"
    container_name: grafana
    volumes:
      - ./grafana:/var/lib/grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    networks:
      - maianet
    depends_on:
      - prometheus
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_FEATURE_TOGGLES_ENABLE=accessControlOnCall
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app

  loki:
    image: grafana/loki:main-e9b6ce9
    ports:
      - "3100:3100"
    volumes:
      - ./lokiconfig/local-config.yaml:/etc/loki/local-config.yaml
    command:
      - -config.file=/etc/loki/local-config.yaml
      - -print-config-stderr=true
    networks:
      - maianet

  promtail:
    image: grafana/promtail:2.0.0
    command: -config.file=/etc/promtail/config.yaml
    volumes:
      - "./promtail/config.yaml:/etc/promtail/config.yaml"
      - "./logs:/logs"
      - "./tmp:/tmp"
    networks:
      - maianet
    ports:
      - 9080:9080

  sonarqube:
    image: sonarqube:lts-community
    depends_on:
      - postegre_db
    networks:
      - maianet
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
      SONAR_JDBC_USERNAME: maia
      SONAR_JDBC_PASSWORD: maiapw
    ports:
      - "9000:9000"
    volumes:
      - sonar_data:/opt/sonarqube/data
      - sonar_logs:/opt/sonarqube/logs

networks:
  maianet:
    driver: bridge

volumes:
  postgresql:
  postgresql_data:
  prometheus_data:
  sonar_data:
  sonar_logs:
